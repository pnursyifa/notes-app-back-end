{
	"info": {
		"_postman_id": "ab3484ea-7503-4641-ac65-4c8a928c69df",
		"name": "Notes API Test (manual)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48956716",
		"_collection_link": "https://r012d5x1578-7877497.postman.co/workspace/Putri-Nursyifa-R012D5X1578's-Wo~7ed3dd6e-f453-49bc-8098-cac9a6c219b9/collection/48956716-ab3484ea-7503-4641-ac65-4c8a928c69df?action=share&source=collection_link&creator=48956716"
	},
	"item": [
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"});",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');",
							"    pm.expect(responseJson).to.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should have noteId property and not equal to empty', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty('noteId');",
							"    pm.expect(data.noteId).to.not.equals('');",
							"",
							"    pm.environment.set('noteId', data.noteId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A\",\n    \"tags\": [\n        \"Android\",\n        \"Web\"\n    ],\n    \"body\": \"Isi dari catatan A\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}",
					"host": [
						"{{base-url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.have.ownProperty('notes');",
							"    pm.expect(data.notes).to.be.an('array');",
							"    pm.expect(data.notes).lengthOf.at.least(1);",
							"}); "
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}",
					"host": [
						"{{base-url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have the correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('data');",
							"    pm.expect(responseJson.data).to.be.an('object');",
							"});",
							"",
							"pm.test('response body data should contain note object', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.have.ownProperty('note');",
							"    pm.expect(data.note).to.be.an('object');",
							"});",
							"",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {",
							"    const responseJson = pm.response.json();",
							"    const { data: { note } } = responseJson;",
							"    const expectedId = pm.environment.get('noteId');",
							"    const expectedTitle = 'Catatan A';",
							"    const expectedTags = ['Android', 'Web'];",
							"    const expectedBody = 'Isi dari catatan A';",
							"    pm.expect(note).to.have.ownProperty('id');",
							"    pm.expect(note.id).to.equals(expectedId);",
							"    pm.expect(note).to.have.ownProperty('title');",
							"    pm.expect(note.title).to.equals(expectedTitle);",
							"    pm.expect(note).to.have.ownProperty('tags');",
							"    pm.expect(note.tags).to.eql(expectedTags);",
							"    pm.expect(note).to.have.ownProperty('body');",
							"    pm.expect(note.body).to.equals(expectedBody);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A\",\n    \"tags\": [\n        \"Android\",\n        \"Web\"\n    ],\n    \"body\": \"Isi dari catatan A\"\n}"
				},
				"url": {
					"raw": "{{base-url}}/{{noteId}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');",
							"});",
							"",
							"pm.test('when request the updated note', () => {",
							"    const noteId = pm.environment.get('noteId');",
							"    const baseUrl = pm.environment.get('base-url');",
							"    pm.sendRequest(`${baseUrl}/${noteId}`, (error, response) => {",
							"        if (!error) {",
							"            pm.test('then the updated note should contain the latest data', () => {",
							"                const responseJson = response.json();",
							"                const { data: { note } } = responseJson;",
							"",
							"                const expectedTitle = 'Catatan A Revised';",
							"                const expectedTags = ['Android', 'Web'];",
							"                const expectedBody = 'Isi dari Catatan A Revised';",
							"",
							"                pm.expect(note.title).to.equals(expectedTitle);",
							"                pm.expect(note.tags).to.eql(expectedTags);",
							"                pm.expect(note.body).to.equals(expectedBody);",
							"            });",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\n        \"Android\",\n        \"Web\"\n    ],\n    \"body\": \"Isi dari Catatan A Revised\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/{{noteId}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')",
							"});",
							"",
							"pm.test('response body should be an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body should have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.have.ownProperty('status');",
							"    pm.expect(responseJson.status).to.equals('success');",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');",
							"});",
							"",
							"pm.test('when request the deleted note', () => {",
							"    const noteId = pm.environment.get('noteId');",
							"    const baseUrl = pm.environment.get('base-url');",
							"    pm.sendRequest(`${baseUrl}/${noteId}`, (error, response) => {",
							"        if (!error) {",
							"            pm.test('the deleted note should be not found', () => {",
							"                pm.expect(response.code).to.equals(404);",
							"                const responseJson = response.json();",
							"                pm.expect(responseJson.status).to.equals('fail');",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');",
							"            });",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base-url}}/{{noteId}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}